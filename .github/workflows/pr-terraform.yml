name: PR - Terraform

on:
  pull_request:
    paths:
      - 'examples/**'
      - 'tests/**'
      - '**.tf'

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      AWS_DEFAULT_REGION: eu-central-1
      DNS_ADDRESS: 0 # https://github.com/localstack/localstack/issues/6501
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      LOCALSTACK_API_KEY: ${{ secrets.LOCALSTACK_API_KEY }}
      TF_IN_AUTOMATION: true
      TFDIR: examples
    steps:
      - name: Start LocalStack
        id: localstack
        if: env.LOCALSTACK_API_KEY != 'false'
        run: |
          # Workaround: https://github.com/localstack/localstack/pull/6831
          pip install pyOpenSSL --upgrade
          pip install cryptography --upgrade
          # install LocalStack cli
          pip install localstack
          # Make sure to pull the latest version of the image
          docker pull localstack/localstack
          # Start LocalStack in the background
          localstack start -d
          # Wait 30 seconds for the LocalStack container to become ready before timing out
          echo "Waiting for LocalStack startup..."
          localstack wait -t 30
          echo "Startup complete"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set Versions
        run: |
          TFVER=$(grep .tool-versions -e "terraform" | sed "s/terraform \(.*\)/\1/")
          echo "TFVERSION=$TFVER" >> $GITHUB_ENV

      - name: Copy localstack provider to current dir
        if: env.LOCALSTACK_API_KEY != 'false'
        run: |
          cp tests/localstack.tf .

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TFVERSION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform -chdir=${{ env.TFDIR }} init

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=${{ env.TFDIR }} validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform -chdir=${{ env.TFDIR }} plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Cleanup
        id: cleanup
        if: env.LOCALSTACK_API_KEY != 'false'
        run: rm -f localstack-provider.tf
